<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--配置 CacheManager. 2.1需要加入 ehcache 的 jar 包及配置文件. -->
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"> </bean>

    <!-- //Shiro将数据库中的数据，存放到Realm这种对象中。而Shiro提供的Realm体系较为复杂，一般我们为了使用Shiro的基本目的就是：认证、授权。 -->
    <!--配置realm 自定义的Realm-->
    <bean id="shiroDbRealm" class="com.chaossnow.ms.shiro.realm.MyRealm">
        <!-- 使用credentialsMatcher实现密码验证服务 -->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <!-- 是否启用缓存 -->
        <property name="cachingEnabled" value="true"/>
        <!-- 是否启用身份验证缓存 -->
        <property name="authenticationCachingEnabled" value="true"/>
        <!-- 缓存AuthenticationInfo信息的缓存名称 -->
        <property name="authenticationCacheName" value="authenticationCache"/>
        <!-- 是否启用授权缓存，缓存AuthorizationInfo信息 -->
        <property name="authorizationCachingEnabled" value="true"/>
        <!-- 缓存AuthorizationInfo信息的缓存名称 -->
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>

    <!-- 配置网页缓存 30天免登录 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
    </bean>


    <!-- shiro结合Session会话管理器 start -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- session的失效时长，单位毫秒 1小时: 3600000, itzixi站点设置以 6小时 为主：21600000 -->
        <!-- 设置全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期 1800000 -->
        <property name="globalSessionTimeout" value="21600000"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 是否开启会话验证器，默认是开启的 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- cipherKey是加密rememberMe Cookie的密匙，默认AES算法 -->
        <!-- <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/> -->
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!--配置securityManager安全管理器 -->
    <!--
    	SecurityManager：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；
		且它管理着所有Subject；可以看出它是Shiro 的核心，它负责与后边介绍的其他组件进行交互
     -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="shiroDbRealm" />
        <!-- 配置sessionManager，提供session管理 -->
        <property name="sessionManager" ref="sessionManager"></property>

        <property name="cacheManager" ref="cacheManager"/>
        <!-- 设置securityManager安全管理器的rememberMeManger -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.chaossnow.ms.shiro.credentials.MsHashedCredentialsMatcher">
        <!-- 使用Spring构造器注入cacheManager -->
        <constructor-arg ref="cacheManager"/>
        <!-- 指定散列算法名称 -->
        <property name="hashAlgorithmName" value="md5"/>
        <!-- 指定散列迭代的次数 -->
        <property name="hashIterations" value="2"/>
        <!-- 是否储存散列后的密码为16进制，需要和生成密码时的一样，默认是base64 -->
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>


    <!--配置lifecycleBeanPostProcessor，可以自动调用spring ioc 容器中的shiro bean 的生命周期方法  -->
    <!-- 开启Shiro注解的Spring配置方式的beans。在lifecycleBeanPostProcessor之后运行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

    <!--启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>

    <!-- 没有权限的页面 -->
    <!-- <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
    <!--
      配置哪些页面需要受保护.
      以及访问这些页面需要的权限.
      1). anon 可以被匿名访问
      2). authc 必须认证(即登录)后才可能访问的页面.
      3). logout 登出.
      4). roles 角色过滤器
  -->

    <bean id="urlPathMatchingFilter" class="com.chaossnow.ms.shiro.UrlPathMatchingFilter"/>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/login" />
        <property name="successUrl" value="/example/index" />
        <property name="unauthorizedUrl" value="/login" />
        <property name="filters">
            <map>
                <entry key="url" value-ref="urlPathMatchingFilter"/>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
               <!-- /api/authenticationn = authc -->
               <!-- /api/menu =authc -->
               <!-- /api/admin/** = authc -->
                /webjars/** = anon
                /swagger-resources/** = anon
                /swagger/** = anon
                /swagger-ui.html = anon
                /doc.html = anon
               <!-- /api/admin/** = url -->
                /v2/** = anon
                /api/** =  anon
                /test/** =  anon
            </value>
        </property>
    </bean>

    <!-- 开启Shiro注解的Spring配置方式的beans。在lifecycleBeanPostProcessor之后运行 -->
    <bean
            class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>

    <!-- shiro为集成spring 异常处理器 在这里不做异常处理-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"/>
    <!--     <property name="exceptionMappings"> -->
    <!--         &lt;!&ndash; <props> &ndash;&gt; -->
    <!--         &lt;!&ndash;     &lt;!&ndash; 无权限跳转到登陆页，可自行定义 &ndash;&gt; &ndash;&gt; -->
    <!--         &lt;!&ndash;     <prop key="org.apache.shiro.authz.UnauthorizedException">/test.html</prop> &ndash;&gt; -->
    <!--         &lt;!&ndash; </props> &ndash;&gt; -->
    <!--     </property> -->
    <!-- </bean> -->

</beans>